/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign, __awaiter, __generator } from "tslib";
import { ExtensionsMap } from './extensions';
import { fromBuffer } from 'file-type';
import isutf8 from 'isutf8';
/**
 * Resolve cdn url based on handle type
 *
 * @private
 * @param session session object
 * @param handle file handle (hash, src://alias, url)
 */
export var resolveCdnUrl = function (session, handle) {
    var cdnURL = session.urls.cdnUrl;
    if (handle && (handle.indexOf('src:') === 0 || handle.indexOf('http') === 0)) {
        if (!session.apikey) {
            throw new Error('Api key is required when storage alias is provided');
        }
        // apikey is required for alias or external sources call
        return "".concat(cdnURL, "/").concat(session.apikey);
    }
    return cdnURL;
};
/**
 * Resolve all urls with provided cnames
 *
 * @private
 * @param urls
 * @param cname
 */
export var resolveHost = function (urls, cname) {
    if (!cname) {
        return urls;
    }
    var hosts = /filestackapi.com|filestackcontent.com/i;
    Object.keys(urls).forEach(function (key) {
        urls[key] = urls[key].replace(hosts, cname);
    });
    return urls;
};
/**
 * Removes empty options from object
 *
 * @private
 * @param obj
 */
export var removeEmpty = function (obj) {
    var newObj = __assign({}, obj);
    Object.keys(newObj).forEach(function (k) { return !newObj[k] && typeof newObj[k] !== 'boolean' && delete newObj[k]; });
    return newObj;
};
/**
 * Returns unique time
 */
var last;
export var uniqueTime = function () {
    var time = Date.now();
    last = time === last ? time + 1 : time;
    return last;
};
/**
 * Generates random string with provided length
 *
 * @param len
 */
export var uniqueId = function (len) {
    if (len === void 0) { len = 10; }
    return new Array(len).join().replace(/(.|$)/g, function () { return ((Math.random() * 36) | 0).toString(36)[Math.random() < 0.5 ? 'toString' : 'toUpperCase'](); });
};
/**
 * Check if input is a svg
 *
 * @param {Uint8Array | Buffer} file
 * @returns {string} - mimetype
 */
export var getMimetype = function (file, name) { return __awaiter(void 0, void 0, void 0, function () {
    var type, e_1, mime_1, excludedMimetypes;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, fromBuffer(file)];
            case 1:
                type = _a.sent();
                return [3 /*break*/, 3];
            case 2:
                e_1 = _a.sent();
                console.warn("An exception occurred while processing the buffer:", e_1.message);
                return [3 /*break*/, 3];
            case 3:
                if (name && name.indexOf('.') > -1) {
                    mime_1 = extensionToMime(name);
                    if (mime_1) {
                        return [2 /*return*/, mime_1];
                    }
                }
                excludedMimetypes = ['text/plain', 'application/octet-stream', 'application/x-ms', 'application/x-msi', 'application/zip'];
                if (type && excludedMimetypes.indexOf(type.mime) === -1) {
                    return [2 /*return*/, type.mime];
                }
                try {
                    if (isutf8(file)) {
                        return [2 /*return*/, 'text/plain'];
                    }
                }
                catch (e) {
                    /* istanbul ignore next */
                    console.warn('Additional mimetype checks (text/plain) are currently not supported for browsers');
                }
                // this is only fallback, omit it in coverage
                /* istanbul ignore next */
                // if we cant find types by extensions and we have magic bytes fallback to it
                if (type) {
                    return [2 /*return*/, type.mime];
                }
                return [2 /*return*/, 'application/octet-stream'];
        }
    });
}); };
/**
 * Change extension to according mimetype using ext=>mimetype map
 *
 * @param ext - string
 * @return string|boolean
 */
export var extensionToMime = function (ext) {
    if (!ext || ext.length === 0) {
        return;
    }
    if (ext.split('/').length === 2) {
        return ext;
    }
    if (ext.indexOf('.') > -1) {
        ext = ext.split('.').pop();
    }
    ext = ext.toLocaleLowerCase();
    var keys = Object.keys(ExtensionsMap);
    var mapLen = keys.length;
    for (var i = 0; i < mapLen; i++) {
        if (ExtensionsMap[keys[i]].indexOf(ext) > -1) {
            return keys[i];
        }
    }
    return;
};
/**
 * Sanitize file name
 *
 * @param name
 * @param {bool} options  - enable,disable sanitizer, default enabled
 * @param {string} options.replacement - replacement for sanitized chars defaults to "-"
 * @param {string[]} options.exclude - array with excluded chars default - `['\', '{', '}','|', '%', '`', '"', "'", '~', '[', ']', '#', '|', '^', '<', '>']`
 */
export var sanitizeName = function (name, options) {
    if (options === void 0) { options = true; }
    if (typeof options === 'boolean' && !options) {
        return name;
    }
    var ext;
    var replacement = typeof options !== 'boolean' && options.replacement ? options.replacement : '-';
    var exclude = typeof options !== 'boolean' && options.exclude ? options.exclude : ['\\', '{', '}', '|', '%', '`', '"', "'", '~', '[', ']', '#', '|', '^', '<', '>'];
    if (!name || name.length === 0) {
        return 'undefined';
    }
    var fileParts = name.split('.');
    if (fileParts.length > 1) {
        ext = fileParts.pop();
    }
    return "".concat(fileParts
        .join('.')
        .split('')
        .map(function (char) { return (exclude.indexOf(char) > -1 ? replacement : char); })
        .join('')).concat(ext ? '.' + ext : '');
};
/**
 * Filter object to given fields
 *
 * @param toFilter
 * @param requiredFields
 */
export var filterObject = function (toFilter, requiredFields) {
    if (!requiredFields || requiredFields.length === 0) {
        return toFilter;
    }
    if (Object.keys(toFilter).length === 0) {
        return toFilter;
    }
    return Object.keys(toFilter)
        .filter(function (f) { return requiredFields.indexOf(f) > -1; })
        .reduce(function (obj, key) {
        var _a;
        return (__assign(__assign({}, obj), (_a = {}, _a[key] = toFilter[key], _a)));
    }, {});
};
/**
 * Deep cleanup object from functions
 *
 * @param obj
 */
export var cleanUpCallbacks = function (obj) {
    if (!obj || Object.keys(obj).length === 0) {
        return obj;
    }
    Object.keys(obj).forEach(function (k) {
        if (typeof obj[k] === 'function') {
            obj[k] = undefined;
        }
        if (obj[k] === Object(obj[k])) {
            obj[k] = cleanUpCallbacks(obj[k]);
        }
    });
    return obj;
};
export * from './index.node';

//# sourceMappingURL=data:application/json;charset=utf8;base64,
