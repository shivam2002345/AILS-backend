/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign, __awaiter, __generator } from "tslib";
// import { config } from './../../config';
import nock from 'nock';
import { Prefetch } from './prefetch';
import { FsRequestErrorCode } from '../request';
var testApiKey = 'AHv2222222222444444uez';
var testSecurity = {
    policy: 'examplePolicy',
    signature: 'exampleSignature',
};
var testURL = {
    fileApiUrl: '',
    uploadApiUrl: 'https://uploadtesturl-fs.com',
    cloudApiUrl: '',
    cdnUrl: '',
    pickerUrl: '',
    processUrl: '',
};
var testSession = {
    apikey: testApiKey,
    urls: testURL,
};
var scope = nock(testURL.uploadApiUrl);
// mock cors responses for all request for browser tests
scope.defaultReplyHeaders({
    'access-control-allow-origin': function (req) { var _a; return (_a = req.getHeader('origin')) === null || _a === void 0 ? void 0 : _a.toString(); },
    'access-control-allow-methods': function (req) { var _a; return (_a = req.getHeader('access-control-request-method')) === null || _a === void 0 ? void 0 : _a.toString(); },
    'access-control-allow-headers': function (req) { var _a; return (_a = req.getHeader('access-control-request-headers')) === null || _a === void 0 ? void 0 : _a.toString(); },
    'content-type': 'application/json',
});
describe('Prefetch', function () {
    beforeEach(function () {
        scope
            .options(/.*/)
            .reply(204);
    });
    it('should make correct request to prefetch and return new config', function () { return __awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, serverResponse, test, prefetch, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = __assign({}, testSession);
                    serverResponse = {
                        blocked: false,
                        settings: {
                            customsource: false,
                            inapp_browser: false,
                        },
                        permissions: {
                            transforms_ui: false,
                        },
                        updated_config: {
                            fromSources: ['googledrive'],
                        },
                    };
                    scope.post('/prefetch').once().reply(200, serverResponse);
                    test = function () { return 2; };
                    prefetch = new Prefetch(sessionCopy);
                    return [4 /*yield*/, prefetch.getConfig({
                            pickerOptions: {
                                // @ts-ignore
                                onFileSelected: test,
                                fromSources: ['googledrive', 'test'],
                            },
                        })];
                case 1:
                    res = _a.sent();
                    expect(res.pickerOptions.onFileSelected).toEqual(test);
                    expect(res.pickerOptions.fromSources).toEqual(['googledrive']);
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should set correct params to sessions (prefetch)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, serverResponse, prefetch, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = __assign({}, testSession);
                    serverResponse = {
                        blocked: false,
                        settings: {
                            customsource: false,
                            inapp_browser: true,
                        },
                        permissions: {
                            transforms_ui: true,
                        },
                        updated_config: {
                            fromSources: ['googledrive'],
                        },
                    };
                    scope.post('/prefetch').once().reply(200, serverResponse);
                    prefetch = new Prefetch(sessionCopy);
                    return [4 /*yield*/, prefetch.getConfig({
                            pickerOptions: {
                                fromSources: ['facebook', 'test'],
                            },
                        })];
                case 1:
                    res = _a.sent();
                    expect(sessionCopy.prefetch).toEqual(expect.any(Object));
                    expect(sessionCopy.prefetch.settings.inapp_browser).toEqual(true);
                    expect(sessionCopy.prefetch.permissions.transforms_ui).toEqual(true);
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw error when response code is other thant 200', function () { return __awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, prefetch, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    sessionCopy = __assign({}, testSession);
                    prefetch = new Prefetch(sessionCopy);
                    scope.post('/prefetch').once().reply(500);
                    return [4 /*yield*/, prefetch.getConfig({})];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    expect(err_1.code).toEqual(FsRequestErrorCode.SERVER);
                    return [3 /*break*/, 3];
                case 3:
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should add security to request when provided', function () { return __awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, mockPref, prefetch, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = __assign(__assign({}, testSession), { signature: testSecurity.signature, policy: testSecurity.policy });
                    mockPref = jest.fn().mockImplementation(function () { return ({}); });
                    scope.post('/prefetch').once().reply(200, function (_, data) { return mockPref(data); });
                    prefetch = new Prefetch(sessionCopy);
                    return [4 /*yield*/, prefetch.getConfig({
                            pickerOptions: {},
                        })];
                case 1:
                    res = _a.sent();
                    expect(mockPref).toHaveBeenCalledWith({
                        apikey: testApiKey,
                        settings: ['inapp_browser'],
                        security: {
                            signature: testSecurity.signature,
                            policy: testSecurity.policy,
                        },
                    });
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should always add inapp browser setting to request', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockPref, prefetch;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockPref = jest.fn().mockImplementation(function () { return ({}); });
                    scope.post('/prefetch').once().reply(200, function (_, data) { return mockPref(data); });
                    prefetch = new Prefetch(__assign({}, testSession));
                    return [4 /*yield*/, prefetch.getConfig({})];
                case 1:
                    _a.sent();
                    expect(mockPref).toHaveBeenCalledWith({
                        apikey: testApiKey,
                        settings: ['inapp_browser'],
                    });
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should always add inapp browser setting to request event if some settings are provided', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockPref, prefetch;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockPref = jest.fn().mockImplementation(function () { return ({}); });
                    scope.post('/prefetch').once().reply(200, function (_, data) { return mockPref(data); });
                    prefetch = new Prefetch(__assign({}, testSession));
                    return [4 /*yield*/, prefetch.getConfig({ settings: ['inapp_browser'] })];
                case 1:
                    _a.sent();
                    expect(mockPref).toHaveBeenCalledWith({
                        apikey: testApiKey,
                        settings: ['inapp_browser'],
                    });
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should return old config when updated_config is missing in response', function () { return __awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, pickerOptions, prefetch, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = __assign(__assign({}, testSession), { signature: testSecurity.signature, policy: testSecurity.policy });
                    scope.post('/prefetch').once().reply(200, {
                        blocked: true,
                    });
                    pickerOptions = {
                        uploadInBackground: true,
                        onUploadDone: function () { return console.log; },
                        storeTo: {
                            location: 'asd',
                        },
                    };
                    prefetch = new Prefetch(sessionCopy);
                    return [4 /*yield*/, prefetch.getConfig({ pickerOptions: pickerOptions })];
                case 1:
                    res = _a.sent();
                    expect(res.pickerOptions).toEqual(pickerOptions);
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
