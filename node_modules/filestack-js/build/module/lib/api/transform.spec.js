import { __assign } from "tslib";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { transform } from './transform';
import { config } from './../../config';
import { Filelink } from './../filelink';
jest.mock('./../filelink');
var defaultApikey = 'EXAMPLE_API_KEY';
var defaultHandle = 'EXAMPLE_HANDLE';
var defaultSecurity = {
    policy: 'examplePolicy',
    signature: 'exampleSignature',
};
var sessionURls = config.urls;
var defaultSession = {
    apikey: defaultApikey,
    urls: sessionURls,
};
describe('OldTransforms', function () {
    it('should pass params to Filelink class', function () {
        transform(defaultSession, defaultHandle, {
            partial_pixelate: {
                amount: 2,
            },
        });
        expect(Filelink.prototype.addTask).toHaveBeenCalledWith('partial_pixelate', {
            amount: 2,
        });
    });
    it('should respect security params', function () {
        transform(__assign(__assign({}, defaultSession), defaultSecurity), defaultHandle, {
            partial_pixelate: {
                amount: 2,
            },
        });
        expect(Filelink.prototype.addTask).toHaveBeenCalledWith('security', defaultSecurity);
    });
    it('should respect cache=false transformation', function () {
        transform(defaultSession, defaultHandle, {
            // @ts-ignore
            cache: false,
        });
        expect(Filelink.prototype.addTask).toHaveBeenCalledWith('cache', false);
    });
    it('should remove falsy parameters transformation', function () {
        transform(defaultSession, defaultHandle, {
            flip: false,
        });
        expect(Filelink.prototype.addTask).not.toHaveBeenCalledWith('flip', false);
    });
    it('should change cammel case to snake case transformations', function () {
        transform(defaultSession, defaultHandle, {
            // @ts-ignore
            partialPixelate: {
                amount: 2,
            },
        });
        expect(Filelink.prototype.addTask).toHaveBeenCalledWith('partial_pixelate', {
            amount: 2,
        });
    });
    it('return call toString on filelink when params are empty', function () {
        var testUrl = 'nanana';
        jest.spyOn(Filelink.prototype, 'toString').mockImplementation(function () { return testUrl; });
        expect(transform(defaultSession, defaultHandle)).toEqual(testUrl);
    });
    it('should enable base64 on filelink', function () {
        transform(defaultSession, defaultHandle, {
            // @ts-ignore
            partialPixelate: {
                amount: 2,
            },
        }, true);
        expect(Filelink.prototype.setBase64).toHaveBeenCalledWith(true);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXBpL3RyYW5zZm9ybS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFM0IsSUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFDeEMsSUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7QUFDdkMsSUFBTSxlQUFlLEdBQUc7SUFDdEIsTUFBTSxFQUFFLGVBQWU7SUFDdkIsU0FBUyxFQUFFLGtCQUFrQjtDQUM5QixDQUFDO0FBRUYsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNoQyxJQUFNLGNBQWMsR0FBRztJQUNyQixNQUFNLEVBQUUsYUFBYTtJQUNyQixJQUFJLEVBQUUsV0FBVztDQUNsQixDQUFDO0FBRUYsUUFBUSxDQUFDLGVBQWUsRUFBRTtJQUN4QixFQUFFLENBQUMsc0NBQXNDLEVBQUU7UUFDekMsU0FBUyxDQUNQLGNBQWMsRUFDZCxhQUFhLEVBQ2I7WUFDRSxnQkFBZ0IsRUFBRTtnQkFDaEIsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFO1lBQzFFLE1BQU0sRUFBRSxDQUFDO1NBQ1YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUU7UUFDbkMsU0FBUyx1QkFFRixjQUFjLEdBQ2QsZUFBZSxHQUVwQixhQUFhLEVBQ2I7WUFDRSxnQkFBZ0IsRUFBRTtnQkFDaEIsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN2RixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtRQUM5QyxTQUFTLENBQ1AsY0FBYyxFQUNkLGFBQWEsRUFDYjtZQUNFLGFBQWE7WUFDYixLQUFLLEVBQUUsS0FBSztTQUNiLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRTtRQUNsRCxTQUFTLENBQ1AsY0FBYyxFQUNkLGFBQWEsRUFDYjtZQUNFLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FDRixDQUFDO1FBRUYsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5REFBeUQsRUFBRTtRQUM1RCxTQUFTLENBQ1AsY0FBYyxFQUNkLGFBQWEsRUFDYjtZQUNFLGFBQWE7WUFDYixlQUFlLEVBQUU7Z0JBQ2YsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFO1lBQzFFLE1BQU0sRUFBRSxDQUFDO1NBQ1YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0RBQXdELEVBQUU7UUFDM0QsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxjQUFNLE9BQUEsT0FBTyxFQUFQLENBQU8sQ0FBQyxDQUFDO1FBRTdFLE1BQU0sQ0FBQyxTQUFTLENBQ2QsY0FBYyxFQUNkLGFBQWEsQ0FDZCxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFO1FBQ3JDLFNBQVMsQ0FDUCxjQUFjLEVBQ2QsYUFBYSxFQUNiO1lBQ0UsYUFBYTtZQUNiLGVBQWUsRUFBRTtnQkFDZixNQUFNLEVBQUUsQ0FBQzthQUNWO1NBQ0YsRUFDRCxJQUFJLENBQ0wsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoibGliL2FwaS90cmFuc2Zvcm0uc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyB0cmFuc2Zvcm0gfSBmcm9tICcuL3RyYW5zZm9ybSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBGaWxlbGluayB9IGZyb20gJy4vLi4vZmlsZWxpbmsnO1xuXG5qZXN0Lm1vY2soJy4vLi4vZmlsZWxpbmsnKTtcblxuY29uc3QgZGVmYXVsdEFwaWtleSA9ICdFWEFNUExFX0FQSV9LRVknO1xuY29uc3QgZGVmYXVsdEhhbmRsZSA9ICdFWEFNUExFX0hBTkRMRSc7XG5jb25zdCBkZWZhdWx0U2VjdXJpdHkgPSB7XG4gIHBvbGljeTogJ2V4YW1wbGVQb2xpY3knLFxuICBzaWduYXR1cmU6ICdleGFtcGxlU2lnbmF0dXJlJyxcbn07XG5cbmNvbnN0IHNlc3Npb25VUmxzID0gY29uZmlnLnVybHM7XG5jb25zdCBkZWZhdWx0U2Vzc2lvbiA9IHtcbiAgYXBpa2V5OiBkZWZhdWx0QXBpa2V5LFxuICB1cmxzOiBzZXNzaW9uVVJscyxcbn07XG5cbmRlc2NyaWJlKCdPbGRUcmFuc2Zvcm1zJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHBhc3MgcGFyYW1zIHRvIEZpbGVsaW5rIGNsYXNzJywgKCkgPT4ge1xuICAgIHRyYW5zZm9ybShcbiAgICAgIGRlZmF1bHRTZXNzaW9uLFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgcGFydGlhbF9waXhlbGF0ZToge1xuICAgICAgICAgIGFtb3VudDogMixcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5hZGRUYXNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgncGFydGlhbF9waXhlbGF0ZScsIHtcbiAgICAgIGFtb3VudDogMixcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXNwZWN0IHNlY3VyaXR5IHBhcmFtcycsICgpID0+IHtcbiAgICB0cmFuc2Zvcm0oXG4gICAgICB7XG4gICAgICAgIC4uLmRlZmF1bHRTZXNzaW9uLFxuICAgICAgICAuLi5kZWZhdWx0U2VjdXJpdHksXG4gICAgICB9LFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgcGFydGlhbF9waXhlbGF0ZToge1xuICAgICAgICAgIGFtb3VudDogMixcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5hZGRUYXNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnc2VjdXJpdHknLCBkZWZhdWx0U2VjdXJpdHkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlc3BlY3QgY2FjaGU9ZmFsc2UgdHJhbnNmb3JtYXRpb24nLCAoKSA9PiB7XG4gICAgdHJhbnNmb3JtKFxuICAgICAgZGVmYXVsdFNlc3Npb24sXG4gICAgICBkZWZhdWx0SGFuZGxlLFxuICAgICAge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5hZGRUYXNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnY2FjaGUnLCBmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVtb3ZlIGZhbHN5IHBhcmFtZXRlcnMgdHJhbnNmb3JtYXRpb24nLCAoKSA9PiB7XG4gICAgdHJhbnNmb3JtKFxuICAgICAgZGVmYXVsdFNlc3Npb24sXG4gICAgICBkZWZhdWx0SGFuZGxlLFxuICAgICAge1xuICAgICAgICBmbGlwOiBmYWxzZSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5hZGRUYXNrKS5ub3QudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2ZsaXAnLCBmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY2hhbmdlIGNhbW1lbCBjYXNlIHRvIHNuYWtlIGNhc2UgdHJhbnNmb3JtYXRpb25zJywgKCkgPT4ge1xuICAgIHRyYW5zZm9ybShcbiAgICAgIGRlZmF1bHRTZXNzaW9uLFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBwYXJ0aWFsUGl4ZWxhdGU6IHtcbiAgICAgICAgICBhbW91bnQ6IDIsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcblxuICAgIGV4cGVjdChGaWxlbGluay5wcm90b3R5cGUuYWRkVGFzaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3BhcnRpYWxfcGl4ZWxhdGUnLCB7XG4gICAgICBhbW91bnQ6IDIsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm4gY2FsbCB0b1N0cmluZyBvbiBmaWxlbGluayB3aGVuIHBhcmFtcyBhcmUgZW1wdHknLCAoKSA9PiB7XG4gICAgY29uc3QgdGVzdFVybCA9ICduYW5hbmEnO1xuICAgIGplc3Quc3B5T24oRmlsZWxpbmsucHJvdG90eXBlLCAndG9TdHJpbmcnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gdGVzdFVybCk7XG5cbiAgICBleHBlY3QodHJhbnNmb3JtKFxuICAgICAgZGVmYXVsdFNlc3Npb24sXG4gICAgICBkZWZhdWx0SGFuZGxlXG4gICAgKSkudG9FcXVhbCh0ZXN0VXJsKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlbmFibGUgYmFzZTY0IG9uIGZpbGVsaW5rJywgKCkgPT4ge1xuICAgIHRyYW5zZm9ybShcbiAgICAgIGRlZmF1bHRTZXNzaW9uLFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBwYXJ0aWFsUGl4ZWxhdGU6IHtcbiAgICAgICAgICBhbW91bnQ6IDIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICBleHBlY3QoRmlsZWxpbmsucHJvdG90eXBlLnNldEJhc2U2NCkudG9IYXZlQmVlbkNhbGxlZFdpdGgodHJ1ZSk7XG4gIH0pO1xufSk7XG4iXX0=
