/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as utils from './utils';
var printLog = function (status, name, value) { return "".concat(name, " should return ").concat(status, " when value is ").concat(value); };
describe('Request/Utils', function () {
    describe('isBuffer', function () {
        // @ts-ignore
        it(printLog(false, 'isBuffer', '{}'), function () { return expect(utils.isBuffer()).toBeFalsy(); });
    });
    describe('isArrayBuffer', function () {
        it(printLog(true, 'isArrayBuffer', 'new ArrayBuffer(10)'), function () {
            expect(utils.isArrayBuffer(Buffer.alloc(10))).toBeFalsy();
        });
        it(printLog(true, 'isArrayBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isArrayBuffer()).toBeFalsy();
        });
    });
    describe('isFile', function () {
        var file = new File(['foo'], 'foo.txt', { type: 'text/plain' });
        it(printLog(true, 'isFile', 'new File()'), function () { return expect(utils.isFile(file)).toBeTruthy(); });
    });
    describe('isBlob', function () {
        var parts = ['<a id="id"></a>'];
        var blob = new Blob(parts, { type: 'text/html' });
        it(printLog(true, 'isBlob', 'new Blob()'), function () { return expect(utils.isBlob(blob)).toBeTruthy(); });
    });
    describe('isFormData', function () {
        var formData = new FormData();
        formData.append('name', 'value');
        it(printLog(true, 'isFormData', "'value'"), function () { return expect(utils.isFormData(formData)).toBeTruthy(); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC91dGlscy5zcGVjLmJyb3dzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxLQUFLLEtBQUssTUFBTSxTQUFTLENBQUM7QUFFakMsSUFBTSxRQUFRLEdBQUcsVUFBQyxNQUF3QixFQUFFLElBQVksRUFBRSxLQUFhLElBQWEsT0FBQSxVQUFHLElBQUksNEJBQWtCLE1BQU0sNEJBQWtCLEtBQUssQ0FBRSxFQUF4RCxDQUF3RCxDQUFDO0FBRTdJLFFBQVEsQ0FBQyxlQUFlLEVBQUU7SUFDeEIsUUFBUSxDQUFDLFVBQVUsRUFBRTtRQUNuQixhQUFhO1FBQ2IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQXBDLENBQW9DLENBQUMsQ0FBQztJQUNwRixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxlQUFlLEVBQUU7UUFDeEIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixDQUFDLEVBQUU7WUFDekQsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDdEMsYUFBYTtZQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRTtRQUNqQixJQUFNLElBQUksR0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFDO0lBQzVGLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRTtRQUNqQixJQUFNLEtBQUssR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbEMsSUFBTSxJQUFJLEdBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDMUQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUF2QyxDQUF1QyxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsWUFBWSxFQUFFO1FBQ3JCLElBQU0sUUFBUSxHQUFhLElBQUksUUFBUSxFQUFFLENBQUM7UUFDMUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUEvQyxDQUErQyxDQUFDLENBQUM7SUFDckcsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJsaWIvcmVxdWVzdC91dGlscy5zcGVjLmJyb3dzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IGJ5IEZpbGVzdGFjay5cbiAqIFNvbWUgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgcHJpbnRMb2cgPSAoc3RhdHVzOiBib29sZWFuIHwgc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgPT4gYCR7bmFtZX0gc2hvdWxkIHJldHVybiAke3N0YXR1c30gd2hlbiB2YWx1ZSBpcyAke3ZhbHVlfWA7XG5cbmRlc2NyaWJlKCdSZXF1ZXN0L1V0aWxzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnaXNCdWZmZXInLCAoKSA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGl0KHByaW50TG9nKGZhbHNlLCAnaXNCdWZmZXInLCAne30nKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzQnVmZmVyKCkpLnRvQmVGYWxzeSgpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzQXJyYXlCdWZmZXInLCAoKSA9PiB7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzQXJyYXlCdWZmZXInLCAnbmV3IEFycmF5QnVmZmVyKDEwKScpLCAoKSA9PiB7XG4gICAgICBleHBlY3QodXRpbHMuaXNBcnJheUJ1ZmZlcihCdWZmZXIuYWxsb2MoMTApKSkudG9CZUZhbHN5KCk7XG4gICAgfSk7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzQXJyYXlCdWZmZXInLCAnJyksICgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGV4cGVjdCh1dGlscy5pc0FycmF5QnVmZmVyKCkpLnRvQmVGYWxzeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNGaWxlJywgKCkgPT4ge1xuICAgIGNvbnN0IGZpbGU6IEZpbGUgPSBuZXcgRmlsZShbJ2ZvbyddLCAnZm9vLnR4dCcsIHsgdHlwZTogJ3RleHQvcGxhaW4nIH0pO1xuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0ZpbGUnLCAnbmV3IEZpbGUoKScpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNGaWxlKGZpbGUpKS50b0JlVHJ1dGh5KCkpO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNCbG9iJywgKCkgPT4ge1xuICAgIGNvbnN0IHBhcnRzID0gWyc8YSBpZD1cImlkXCI+PC9hPiddO1xuICAgIGNvbnN0IGJsb2I6IEJsb2IgPSBuZXcgQmxvYihwYXJ0cywgeyB0eXBlOiAndGV4dC9odG1sJyB9KTtcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNCbG9iJywgJ25ldyBCbG9iKCknKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzQmxvYihibG9iKSkudG9CZVRydXRoeSgpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzRm9ybURhdGEnLCAoKSA9PiB7XG4gICAgY29uc3QgZm9ybURhdGE6IEZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgZm9ybURhdGEuYXBwZW5kKCduYW1lJywgJ3ZhbHVlJyk7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzRm9ybURhdGEnLCBcIid2YWx1ZSdcIiksICgpID0+IGV4cGVjdCh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSkudG9CZVRydXRoeSgpKTtcbiAgfSk7XG59KTtcbiJdfQ==
