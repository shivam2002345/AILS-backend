/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as utils from './utils';
import { Readable } from 'stream';
var printLog = function (status, name, value) { return "".concat(name, " should return ").concat(status, " when value is ").concat(value); };
describe('Request/Utils', function () {
    describe('isArray', function () {
        it(printLog(true, 'isArray', "['value']"), function () { return expect(utils.isArray(['value'])).toBeTruthy(); });
        it(printLog(true, 'isArray', '[]'), function () { return expect(utils.isArray([])).toBeTruthy(); });
        // @ts-ignore
        it(printLog(true, 'isArray', ''), function () { return expect(utils.isArray()).toBeFalsy(); });
        // @ts-ignore
        it(printLog(true, 'isArray', null), function () { return expect(utils.isArray(null)).toBeFalsy(); });
    });
    describe('isArrayBuffer', function () {
        it(printLog(true, 'isArrayBuffer', 'new ArrayBuffer(10)'), function () {
            expect(utils.isArrayBuffer(new ArrayBuffer(10))).toBeTruthy();
        });
        it(printLog(true, 'isArrayBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isArrayBuffer()).toBeFalsy();
        });
    });
    // isBuffer
    describe('isBuffer', function () {
        it(printLog(true, 'isBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isBuffer(null)).toBeFalsy();
        });
        it(printLog(true, 'isBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isBuffer(Buffer.alloc(10))).toBeTruthy();
        });
    });
    describe('isArrayBufferView', function () {
        it(printLog(true, 'isArrayBufferView', 'new DataView(new ArrayBuffer(10))'), function () {
            expect(utils.isArrayBufferView(new DataView(new ArrayBuffer(10)))).toBeTruthy();
        });
        it(printLog(true, 'isArrayBufferView', null), function () {
            // @ts-ignore
            expect(utils.isArrayBufferView(null)).toBeFalsy();
        });
        it(printLog(true, 'isArrayBufferView', null), function () {
            // @ts-ignore
            expect(utils.isArrayBufferView(Buffer.alloc(10))).toBeTruthy();
        });
    });
    describe('isObject', function () {
        it(printLog(true, 'isObject', "{prop: 'value'}"), function () { return expect(utils.isObject({ prop: 'value' })).toBeTruthy(); });
        it(printLog(false, 'isObject', "'value'"), function () { return expect(utils.isObject('value')).toBeFalsy(); });
        it(printLog(false, 'isObject', '10'), function () { return expect(utils.isObject(10)).toBeFalsy(); });
    });
    describe('isString', function () {
        it(printLog(true, 'isString', "'value'"), function () { return expect(utils.isString('value')).toBeTruthy(); });
        it(printLog(false, 'isString', '10'), function () { return expect(utils.isString(10)).toBeFalsy(); });
        it(printLog(false, 'isString', '{}'), function () { return expect(utils.isString({})).toBeFalsy(); });
        it(printLog(false, 'isString', '[]'), function () { return expect(utils.isString([])).toBeFalsy(); });
        it(printLog(false, 'isString', 'false'), function () { return expect(utils.isString(false)).toBeFalsy(); });
    });
    describe('isFile', function () {
        it(printLog(false, 'isFile', null), function () { return expect(utils.isFile(null)).toBeFalsy(); });
    });
    describe('isBlob', function () {
        it(printLog(false, 'isBlob', null), function () { return expect(utils.isBlob(null)).toBeFalsy(); });
    });
    describe('isStream', function () {
        it(printLog(true, 'isStream', 'Stream.Readable()'), function () {
            var stream = new Readable();
            stream._read = function () { return ''; };
            stream.push('beep');
            expect(utils.isStream(stream)).toBeTruthy();
        });
        it(printLog(true, 'isStream', "'value'"), function () { return expect(utils.isStream('value')).toBeFalsy(); });
        it(printLog(true, 'isStream', '10'), function () { return expect(utils.isStream(10)).toBeFalsy(); });
        it(printLog(true, 'isStream', '[]'), function () { return expect(utils.isStream([])).toBeFalsy(); });
    });
    describe('isURLSearchParams', function () {
        it(printLog(true, 'isURLSearchParams', "new URLSearchParams('q=filename=&size=12')"), function () {
            expect(utils.isURLSearchParams(new URLSearchParams('q=filename=&size=12'))).toBeTruthy();
        });
        it(printLog(true, 'isURLSearchParams', "new URLSearchParams('')"), function () {
            expect(utils.isURLSearchParams(new URLSearchParams(''))).toBeTruthy();
        });
    });
    describe('isFormData', function () {
        it(printLog(true, 'isFormData', "'value'"), function () { return expect(utils.isFormData('value')).toBeFalsy(); });
        it(printLog(true, 'isFormData', '10'), function () { return expect(utils.isFormData({})).toBeFalsy(); });
        it(printLog(true, 'isFormData', '[]'), function () { return expect(utils.isFormData([])).toBeFalsy(); });
        it(printLog(true, 'isFormData', '{}'), function () { return expect(utils.isFormData({})).toBeFalsy(); });
    });
    describe('trim', function () {
        it(printLog("'value' without whitespace", 'trim', "' value'"), function () { return expect(utils.trim(' value')).toEqual('value'); });
        it(printLog("'value' without whitespace ", 'trim', "' value '"), function () { return expect(utils.trim(' value ')).toEqual('value'); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
