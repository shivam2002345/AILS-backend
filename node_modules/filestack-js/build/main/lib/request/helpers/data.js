"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseResponse = exports.filestackHeaders = exports.prepareData = void 0;
var tslib_1 = require("tslib");
/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var utils_1 = require("./../utils");
var utils_2 = require("./../../utils");
var headers_1 = require("./headers");
var fast_xml_parser_1 = require("fast-xml-parser");
var debug_1 = tslib_1.__importDefault(require("debug"));
var debug = (0, debug_1.default)('fs:request:data');
/**
 * Prepare request and set content-type header based on data
 *
 * @param headers
 * @param data
 */
var prepareData = function (config) {
    // set filestack debug headers first
    config = (0, exports.filestackHeaders)(config);
    if ((0, utils_1.isFormData)(config.data) || (0, utils_1.isBuffer)(config.data) || (0, utils_1.isStream)(config.data) || (0, utils_1.isFile)(config.data) || (0, utils_1.isBlob)(config.data)) {
        return config;
    }
    // @todo convert it to ArrayBufferView for browser
    if ((0, utils_1.isArrayBuffer)(config.data)) {
        return config;
    }
    if ((0, utils_1.isURLSearchParams)(config.data)) {
        config.headers = (0, headers_1.set)(config.headers, 'content-type', 'application/x-www-form-urlencoded;charset=utf-8');
        config.data = config.data.toString();
    }
    else if ((0, utils_1.isObject)(config.data)) {
        config.headers = (0, headers_1.set)(config.headers, 'content-type', 'application/json', true);
        config.data = JSON.stringify(config.data);
    }
    return config;
};
exports.prepareData = prepareData;
/**
 * Add filestack debug headers to request
 *
 * @param config
 */
var filestackHeaders = function (config) {
    if (!config.filestackHeaders) {
        return config;
    }
    config.headers = (0, headers_1.set)(config.headers, 'filestack-source', (0, utils_2.getVersion)());
    config.headers = (0, headers_1.set)(config.headers, 'filestack-trace-id', "".concat(Math.floor(Date.now() / 1000), "-").concat((0, utils_2.uniqueId)()));
    config.headers = (0, headers_1.set)(config.headers, 'filestack-trace-span', "jssdk-".concat((0, utils_2.uniqueId)()));
    return config;
};
exports.filestackHeaders = filestackHeaders;
/**
 * Prepare response data based on content type
 *
 * @param response
 */
var parseResponse = function (response) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var contentType, data;
    return tslib_1.__generator(this, function (_a) {
        if (!response.headers || !response.headers['content-type']) {
            return [2 /*return*/, Promise.resolve(response)];
        }
        contentType = response.headers['content-type'];
        if (/application\/json/.test(contentType)) {
            try {
                response.data = JSON.parse(response.data);
            }
            catch (e) {
                debug('Cannot parse response %O - %O', response.data, response.headers);
            }
        }
        else if (/text\/(plain|html)/.test(contentType)) {
            if ((0, utils_1.isBuffer)(response.data)) {
                response.data = bufferToString(response.data);
            }
        }
        else if (/application\/xml/.test(contentType)) {
            data = response.data;
            if ((0, utils_1.isBuffer)(response.data)) {
                data = bufferToString(response.data);
            }
            if (fast_xml_parser_1.XMLValidator.validate(data) === true) {
                response.data = new fast_xml_parser_1.XMLParser({
                    ignoreDeclaration: true,
                    ignoreAttributes: true,
                    trimValues: true,
                }).parse(data);
            }
        }
        return [2 /*return*/, Promise.resolve(response)];
    });
}); };
exports.parseResponse = parseResponse;
function bufferToString(buffer) {
    var bufView = new Uint16Array(buffer);
    var length = bufView.length;
    var result = '';
    var addition = Math.pow(2, 16) - 1;
    for (var i = 0; i < length; i += addition) {
        if (i + addition > length) {
            addition = length - i;
        }
        result += String.fromCharCode.apply(null, bufView.subarray(i, i + addition));
    }
    return result;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
