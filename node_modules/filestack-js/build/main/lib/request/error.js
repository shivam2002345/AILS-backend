"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsRequestError = exports.FsRequestErrorCode = void 0;
var tslib_1 = require("tslib");
/**
 * Filestack error codes (common for browser and node)
 *
 * @export
 * @enum {number}
 */
var FsRequestErrorCode;
(function (FsRequestErrorCode) {
    FsRequestErrorCode["ABORTED"] = "ABORTED";
    FsRequestErrorCode["NETWORK"] = "NETWORK";
    FsRequestErrorCode["TIMEOUT"] = "TIMEDOUT";
    FsRequestErrorCode["SERVER"] = "SERVER";
    FsRequestErrorCode["REQUEST"] = "REQUEST";
    FsRequestErrorCode["OTHER"] = "OTHER";
    FsRequestErrorCode["REDIRECT"] = "REDIRECT";
})(FsRequestErrorCode = exports.FsRequestErrorCode || (exports.FsRequestErrorCode = {}));
/**
 * Custom Filestack Request error class
 *
 * @export
 * @class FsRequestError
 * @extends {Error}
 */
var FsRequestError = /** @class */ (function (_super) {
    tslib_1.__extends(FsRequestError, _super);
    /**
     * Creates an instance of FsRequestError.
     *
     * @param {string} message
     * @param {*} config
     * @param {FsResponse} [response]
     * @param {FsRequestErrorCode} [code]
     * @memberof FsRequestError
     */
    function FsRequestError(message, config, response, code) {
        var _newTarget = this.constructor;
        var _this = 
        /* istanbul ignore next */
        _super.call(this, message) || this;
        _this.config = config;
        _this.response = response;
        _this.code = code;
        // const captureStackTrace: Function = (Error as any).captureStackTrace;
        // captureStackTrace && captureStackTrace(this);
        fixProto(_this, _newTarget.prototype);
        return _this;
    }
    return FsRequestError;
}(Error));
exports.FsRequestError = FsRequestError;
function fixProto(target, prototype) {
    var setPrototypeOf = Object.setPrototypeOf;
    /* istanbul ignore next */
    setPrototypeOf ? setPrototypeOf(target, prototype) : (target.__proto__ = prototype);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC9lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBa0JBOzs7OztHQUtHO0FBQ0gsSUFBWSxrQkFRWDtBQVJELFdBQVksa0JBQWtCO0lBQzVCLHlDQUFtQixDQUFBO0lBQ25CLHlDQUFtQixDQUFBO0lBQ25CLDBDQUFvQixDQUFBO0lBQ3BCLHVDQUFpQixDQUFBO0lBQ2pCLHlDQUFtQixDQUFBO0lBQ25CLHFDQUFlLENBQUE7SUFDZiwyQ0FBcUIsQ0FBQTtBQUN2QixDQUFDLEVBUlcsa0JBQWtCLEdBQWxCLDBCQUFrQixLQUFsQiwwQkFBa0IsUUFRN0I7QUFFRDs7Ozs7O0dBTUc7QUFDSDtJQUFvQywwQ0FBSztJQVd2Qzs7Ozs7Ozs7T0FRRztJQUNILHdCQUFZLE9BQWUsRUFBRSxNQUFXLEVBQUUsUUFBcUIsRUFBRSxJQUF5Qjs7UUFBMUY7UUFDRSwwQkFBMEI7UUFDMUIsa0JBQU0sT0FBTyxDQUFDLFNBU2Y7UUFQQyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixLQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixLQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQix3RUFBd0U7UUFDeEUsZ0RBQWdEO1FBQ2hELFFBQVEsQ0FBQyxLQUFJLEVBQUUsV0FBVyxTQUFTLENBQUMsQ0FBQzs7SUFDdkMsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FoQ0EsQUFnQ0MsQ0FoQ21DLEtBQUssR0FnQ3hDO0FBaENZLHdDQUFjO0FBa0MzQixTQUFTLFFBQVEsQ0FBQyxNQUFhLEVBQUUsU0FBYTtJQUM1QyxJQUFNLGNBQWMsR0FBYyxNQUFjLENBQUMsY0FBYyxDQUFDO0lBQ2hFLDBCQUEwQjtJQUMxQixjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsTUFBYyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUMvRixDQUFDIiwiZmlsZSI6ImxpYi9yZXF1ZXN0L2Vycm9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOCBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEZzUmVxdWVzdE9wdGlvbnMsIEZzUmVzcG9uc2UgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBGaWxlc3RhY2sgZXJyb3IgY29kZXMgKGNvbW1vbiBmb3IgYnJvd3NlciBhbmQgbm9kZSlcbiAqXG4gKiBAZXhwb3J0XG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5leHBvcnQgZW51bSBGc1JlcXVlc3RFcnJvckNvZGUge1xuICBBQk9SVEVEID0gJ0FCT1JURUQnLFxuICBORVRXT1JLID0gJ05FVFdPUksnLFxuICBUSU1FT1VUID0gJ1RJTUVET1VUJyxcbiAgU0VSVkVSID0gJ1NFUlZFUicsXG4gIFJFUVVFU1QgPSAnUkVRVUVTVCcsXG4gIE9USEVSID0gJ09USEVSJyxcbiAgUkVESVJFQ1QgPSAnUkVESVJFQ1QnLFxufVxuXG4vKipcbiAqIEN1c3RvbSBGaWxlc3RhY2sgUmVxdWVzdCBlcnJvciBjbGFzc1xuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBGc1JlcXVlc3RFcnJvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG5leHBvcnQgY2xhc3MgRnNSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBFcnJvciBkZXRhaWxzLCBpZSB2YWxpZGF0aW9uIGVycm9yc1xuICAgKlxuICAgKiBAdHlwZSB7Kn1cbiAgICogQG1lbWJlcm9mIEZpbGVzdGFja0Vycm9yXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBGc1JlcXVlc3RPcHRpb25zO1xuICBwdWJsaWMgcmVhZG9ubHkgcmVzcG9uc2U6IEZzUmVzcG9uc2U7XG4gIHB1YmxpYyByZWFkb25seSBjb2RlOiBGc1JlcXVlc3RFcnJvckNvZGU7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgRnNSZXF1ZXN0RXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7Kn0gY29uZmlnXG4gICAqIEBwYXJhbSB7RnNSZXNwb25zZX0gW3Jlc3BvbnNlXVxuICAgKiBAcGFyYW0ge0ZzUmVxdWVzdEVycm9yQ29kZX0gW2NvZGVdXG4gICAqIEBtZW1iZXJvZiBGc1JlcXVlc3RFcnJvclxuICAgKi9cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBjb25maWc6IGFueSwgcmVzcG9uc2U/OiBGc1Jlc3BvbnNlLCBjb2RlPzogRnNSZXF1ZXN0RXJyb3JDb2RlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuXG4gICAgLy8gY29uc3QgY2FwdHVyZVN0YWNrVHJhY2U6IEZ1bmN0aW9uID0gKEVycm9yIGFzIGFueSkuY2FwdHVyZVN0YWNrVHJhY2U7XG4gICAgLy8gY2FwdHVyZVN0YWNrVHJhY2UgJiYgY2FwdHVyZVN0YWNrVHJhY2UodGhpcyk7XG4gICAgZml4UHJvdG8odGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpeFByb3RvKHRhcmdldDogRXJyb3IsIHByb3RvdHlwZToge30pIHtcbiAgY29uc3Qgc2V0UHJvdG90eXBlT2Y6IEZ1bmN0aW9uID0gKE9iamVjdCBhcyBhbnkpLnNldFByb3RvdHlwZU9mO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBzZXRQcm90b3R5cGVPZiA/IHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG90eXBlKSA6ICgodGFyZ2V0IGFzIGFueSkuX19wcm90b19fID0gcHJvdG90eXBlKTtcbn1cbiJdfQ==
