"use strict";
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils = tslib_1.__importStar(require("./utils"));
var printLog = function (status, name, value) { return "".concat(name, " should return ").concat(status, " when value is ").concat(value); };
describe('Request/Utils', function () {
    describe('isBuffer', function () {
        // @ts-ignore
        it(printLog(false, 'isBuffer', '{}'), function () { return expect(utils.isBuffer()).toBeFalsy(); });
    });
    describe('isArrayBuffer', function () {
        it(printLog(true, 'isArrayBuffer', 'new ArrayBuffer(10)'), function () {
            expect(utils.isArrayBuffer(Buffer.alloc(10))).toBeFalsy();
        });
        it(printLog(true, 'isArrayBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isArrayBuffer()).toBeFalsy();
        });
    });
    describe('isFile', function () {
        var file = new File(['foo'], 'foo.txt', { type: 'text/plain' });
        it(printLog(true, 'isFile', 'new File()'), function () { return expect(utils.isFile(file)).toBeTruthy(); });
    });
    describe('isBlob', function () {
        var parts = ['<a id="id"></a>'];
        var blob = new Blob(parts, { type: 'text/html' });
        it(printLog(true, 'isBlob', 'new Blob()'), function () { return expect(utils.isBlob(blob)).toBeTruthy(); });
    });
    describe('isFormData', function () {
        var formData = new FormData();
        formData.append('name', 'value');
        it(printLog(true, 'isFormData', "'value'"), function () { return expect(utils.isFormData(formData)).toBeTruthy(); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC91dGlscy5zcGVjLmJyb3dzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7O0FBRUgscURBQWlDO0FBRWpDLElBQU0sUUFBUSxHQUFHLFVBQUMsTUFBd0IsRUFBRSxJQUFZLEVBQUUsS0FBYSxJQUFhLE9BQUEsVUFBRyxJQUFJLDRCQUFrQixNQUFNLDRCQUFrQixLQUFLLENBQUUsRUFBeEQsQ0FBd0QsQ0FBQztBQUU3SSxRQUFRLENBQUMsZUFBZSxFQUFFO0lBQ3hCLFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDbkIsYUFBYTtRQUNiLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFwQyxDQUFvQyxDQUFDLENBQUM7SUFDcEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZUFBZSxFQUFFO1FBQ3hCLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxxQkFBcUIsQ0FBQyxFQUFFO1lBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3RDLGFBQWE7WUFDYixNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDakIsSUFBTSxJQUFJLEdBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUN4RSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQXZDLENBQXVDLENBQUMsQ0FBQztJQUM1RixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDakIsSUFBTSxLQUFLLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2xDLElBQU0sSUFBSSxHQUFTLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzFELEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFDO0lBQzVGLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFlBQVksRUFBRTtRQUNyQixJQUFNLFFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQzFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxTQUFTLENBQUMsRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBL0MsQ0FBK0MsQ0FBQyxDQUFDO0lBQ3JHLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoibGliL3JlcXVlc3QvdXRpbHMuc3BlYy5icm93c2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IHByaW50TG9nID0gKHN0YXR1czogYm9vbGVhbiB8IHN0cmluZywgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogc3RyaW5nID0+IGAke25hbWV9IHNob3VsZCByZXR1cm4gJHtzdGF0dXN9IHdoZW4gdmFsdWUgaXMgJHt2YWx1ZX1gO1xuXG5kZXNjcmliZSgnUmVxdWVzdC9VdGlscycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2lzQnVmZmVyJywgKCkgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpdChwcmludExvZyhmYWxzZSwgJ2lzQnVmZmVyJywgJ3t9JyksICgpID0+IGV4cGVjdCh1dGlscy5pc0J1ZmZlcigpKS50b0JlRmFsc3koKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc0FycmF5QnVmZmVyJywgKCkgPT4ge1xuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0FycmF5QnVmZmVyJywgJ25ldyBBcnJheUJ1ZmZlcigxMCknKSwgKCkgPT4ge1xuICAgICAgZXhwZWN0KHV0aWxzLmlzQXJyYXlCdWZmZXIoQnVmZmVyLmFsbG9jKDEwKSkpLnRvQmVGYWxzeSgpO1xuICAgIH0pO1xuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0FycmF5QnVmZmVyJywgJycpLCAoKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBleHBlY3QodXRpbHMuaXNBcnJheUJ1ZmZlcigpKS50b0JlRmFsc3koKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzRmlsZScsICgpID0+IHtcbiAgICBjb25zdCBmaWxlOiBGaWxlID0gbmV3IEZpbGUoWydmb28nXSwgJ2Zvby50eHQnLCB7IHR5cGU6ICd0ZXh0L3BsYWluJyB9KTtcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNGaWxlJywgJ25ldyBGaWxlKCknKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzRmlsZShmaWxlKSkudG9CZVRydXRoeSgpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzQmxvYicsICgpID0+IHtcbiAgICBjb25zdCBwYXJ0cyA9IFsnPGEgaWQ9XCJpZFwiPjwvYT4nXTtcbiAgICBjb25zdCBibG9iOiBCbG9iID0gbmV3IEJsb2IocGFydHMsIHsgdHlwZTogJ3RleHQvaHRtbCcgfSk7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzQmxvYicsICduZXcgQmxvYigpJyksICgpID0+IGV4cGVjdCh1dGlscy5pc0Jsb2IoYmxvYikpLnRvQmVUcnV0aHkoKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc0Zvcm1EYXRhJywgKCkgPT4ge1xuICAgIGNvbnN0IGZvcm1EYXRhOiBGb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1EYXRhLmFwcGVuZCgnbmFtZScsICd2YWx1ZScpO1xuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0Zvcm1EYXRhJywgXCIndmFsdWUnXCIpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkpLnRvQmVUcnV0aHkoKSk7XG4gIH0pO1xufSk7XG4iXX0=
