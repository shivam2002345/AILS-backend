"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsRequest = void 0;
/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var types_1 = require("./types");
var dispatch_1 = require("./dispatch");
var request_adapter_node_1 = require("./request_adapter.node");
/**
 * Main isomorphic Filestack request library
 *
 * @export
 * @class FsRequest
 */
var FsRequest = /** @class */ (function () {
    /**
     * Creates an instance of Request.
     *
     * @param {RequestOptions} [config]
     * @memberof FsRequest
     */
    function FsRequest(config) {
        this.defaults = config;
        this.dispatcher = new dispatch_1.Dispatch(new request_adapter_node_1.RequestAdapter());
    }
    /**
     * Returns static FsRequest instance
     *
     * @private
     * @static
     * @returns
     * @memberof FsRequest
     */
    FsRequest.getInstance = function () {
        if (!FsRequest.instance) {
            FsRequest.instance = new FsRequest();
        }
        return FsRequest.instance;
    };
    /**
     * Run request with given adapter
     *
     * @param {RequestOptions} config
     * @returns
     * @memberof Request
     */
    FsRequest.prototype.dispatch = function (config) {
        if (!config.method) {
            config.method = types_1.FsHttpMethod.GET;
        }
        return this.dispatcher.request(Object.assign({}, this.defaults, config));
    };
    /**
     * Dispatch request
     *
     * @static
     * @param {string} url
     * @param {FsRequestOptions} config
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.dispatch = function (url, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { url: url }));
    };
    /**
     * Dispatch GET request
     *
     * @static
     * @param {string} url
     * @param {FsRequestOptions} config
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.get = function (url, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { method: types_1.FsHttpMethod.GET, url: url }));
    };
    /**
     * Dispatch HEAD request
     *
     * @static
     * @param {string} url
     * @param {FsRequestOptions} config
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.head = function (url, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { method: types_1.FsHttpMethod.HEAD, url: url }));
    };
    /**
     * Dispatch OPTIONS request
     *
     * @static
     * @param {string} url
     * @param {FsRequestOptions} config
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.options = function (url, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { method: types_1.FsHttpMethod.OPTIONS, url: url }));
    };
    /**
     * Dispatch PURGE request
     *
     * @static
     * @param {string} url
     * @param {FsRequestOptions} config
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.purge = function (url, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { method: types_1.FsHttpMethod.PURGE, url: url }));
    };
    /**
     * Dispatch DELETE request
     *
     * @static
     * @param {string} url
     * @param {FsRequestOptions} config
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.delete = function (url, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { method: types_1.FsHttpMethod.DELETE, url: url }));
    };
    /**
     * Dispatch POST request
     *
     * @static
     * @param {string} url
     * @param {*} [data]
     * @param {FsRequestOptions} [config]
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.post = function (url, data, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { method: types_1.FsHttpMethod.POST, url: url, data: data }));
    };
    /**
     * Dispatch PUT request
     *
     * @static
     * @param {string} url
     * @param {*} [data]
     * @param {FsRequestOptions} [config]
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.put = function (url, data, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { method: types_1.FsHttpMethod.PUT, url: url, data: data }));
    };
    /**
     * Dispatch PATCH request
     *
     * @static
     * @param {string} url
     * @param {*} [data]
     * @param {FsRequestOptions} [config]
     * @returns {Promise<FsResponse>}
     * @memberof FsRequest
     */
    FsRequest.path = function (url, data, config) {
        return FsRequest.getInstance().dispatch(Object.assign({}, config || {}, { method: types_1.FsHttpMethod.PATH, url: url, data: data }));
    };
    return FsRequest;
}());
exports.FsRequest = FsRequest;
exports.default = FsRequest;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
