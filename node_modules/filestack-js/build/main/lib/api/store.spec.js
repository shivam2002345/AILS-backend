"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var store_1 = require("./store");
var filestack_error_1 = require("./../../filestack_error");
var config_1 = require("./../../config");
var request_1 = require("./../request");
var filelink_1 = require("./../filelink");
jest.mock('./../filelink');
jest.mock('./../request');
var mockedSession = {
    apikey: 'fakeApikey',
    urls: config_1.config.urls,
};
var workflowIds = ['123', '321'];
var storeTaskDef = [{ name: 'store', params: {} }];
var storeTaskDefWithWorkflows = [{ name: 'store', params: {} }];
var sourceToStore = 'urlToStore';
describe('StoreURL', function () {
    beforeEach(function () {
        // @ts-ignore
        request_1.FsRequest.post.mockImplementation(function (_, options) {
            var toReturn = {
                data: {
                    handle: 'test',
                },
            };
            if (options && options.upload_tags) {
                // @ts-ignore
                toReturn.data.upload_tags = options.upload_tags;
            }
            return Promise.resolve(toReturn);
        });
        // @ts-ignore
        filelink_1.Filelink.prototype.getTasks.mockImplementation(function () { return storeTaskDef; });
    });
    it('should call correct store method', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, store_1.storeURL)({ session: mockedSession, url: sourceToStore })];
                case 1:
                    _a.sent();
                    expect(request_1.FsRequest.post).toHaveBeenCalledWith("".concat(mockedSession.urls.processUrl, "/process"), {
                        apikey: mockedSession.apikey,
                        sources: [sourceToStore],
                        tasks: storeTaskDef,
                        upload_tags: undefined,
                    }, {});
                    return [2 /*return*/];
            }
        });
    }); });
    it('should respect passed security and policy', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var fakeSecurity;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeSecurity = {
                        signature: 'fakeS',
                        policy: 'fakeP',
                    };
                    return [4 /*yield*/, (0, store_1.storeURL)({ session: mockedSession, url: sourceToStore, security: fakeSecurity })];
                case 1:
                    _a.sent();
                    expect(filelink_1.Filelink.prototype.security).toHaveBeenCalledWith(fakeSecurity);
                    expect(request_1.FsRequest.post).toHaveBeenCalledWith("".concat(mockedSession.urls.processUrl, "/process"), {
                        apikey: mockedSession.apikey,
                        sources: [sourceToStore],
                        tasks: storeTaskDef,
                        upload_tags: undefined,
                    }, {});
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw error on wrong store params', function () {
        return expect((0, store_1.storeURL)({
            session: mockedSession,
            url: sourceToStore,
            storeParams: {
                // @ts-ignore
                test: 123,
            },
        })).rejects.toEqual(expect.any(filestack_error_1.FilestackError));
    });
    it('should respect token cancel', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var token;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    token = {
                        cancel: function () {
                            console.log('cancel method');
                        },
                    };
                    return [4 /*yield*/, (0, store_1.storeURL)({
                            session: mockedSession,
                            url: sourceToStore,
                            token: token,
                        })];
                case 1:
                    _a.sent();
                    expect(request_1.FsRequest.post).toHaveBeenCalledWith("".concat(mockedSession.urls.processUrl, "/process"), {
                        apikey: mockedSession.apikey,
                        sources: [sourceToStore],
                        tasks: storeTaskDef,
                        upload_tags: undefined,
                        // expect.any(FsCancelToken) is not working correctly with mocked functions
                    }, { cancelToken: expect.any(Object) });
                    return [2 /*return*/];
            }
        });
    }); });
    it('should pass upload tags to request', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var uploadTags, res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    uploadTags = { test: '123' };
                    return [4 /*yield*/, (0, store_1.storeURL)({
                            session: mockedSession,
                            url: sourceToStore,
                            uploadTags: uploadTags,
                        })];
                case 1:
                    res = _a.sent();
                    expect(request_1.FsRequest.post).toHaveBeenCalledWith("".concat(mockedSession.urls.processUrl, "/process"), {
                        apikey: mockedSession.apikey,
                        sources: [sourceToStore],
                        tasks: storeTaskDef,
                        upload_tags: uploadTags,
                    }, {});
                    expect(res.uploadTags).toEqual(uploadTags);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw an error when missing url', function () {
        return expect((0, store_1.storeURL)({ session: mockedSession })).rejects.toEqual(expect.any(filestack_error_1.FilestackError));
    });
    it('should throw on missing handle in response', function () {
        // @ts-ignore
        request_1.FsRequest.post.mockImplementation(function () { return Promise.resolve({
            data: {},
        }); });
        return expect((0, store_1.storeURL)({
            session: mockedSession,
            url: sourceToStore,
        })).rejects.toEqual(expect.any(filestack_error_1.FilestackError));
    });
    it('should be able to run storeUrl with workflows', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, store_1.storeURL)({
                        session: mockedSession,
                        url: sourceToStore,
                        workflowIds: workflowIds,
                    })];
                case 1:
                    _a.sent();
                    expect(request_1.FsRequest.post).toHaveBeenCalledWith("".concat(mockedSession.urls.processUrl, "/process"), {
                        apikey: mockedSession.apikey,
                        sources: [sourceToStore],
                        tasks: storeTaskDefWithWorkflows,
                    }, {});
                    return [2 /*return*/];
            }
        });
    }); });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
