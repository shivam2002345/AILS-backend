"use strict";
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Upload = void 0;
var tslib_1 = require("tslib");
var eventemitter3_1 = require("eventemitter3");
var s3_1 = require("./uploaders/s3");
var filestack_error_1 = require("./../../../filestack_error");
var file_tools_1 = require("./file_tools");
var schema_1 = require("./../../../schema");
var DEFAULT_PROGRESS_INTERVAL = 1000;
var normalizeProgress = function (current, last) {
    current.totalBytes = Math.max(current.totalBytes, last.totalBytes);
    current.totalPercent = Math.max(current.totalPercent, last.totalPercent);
    return current;
};
/**
 * Uploader main class for now its supporting only s3 upload type
 *
 * @export
 * @class Upload
 */
var Upload = /** @class */ (function (_super) {
    tslib_1.__extends(Upload, _super);
    function Upload(options, storeOptions) {
        if (options === void 0) { options = {}; }
        if (storeOptions === void 0) { storeOptions = {}; }
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.storeOptions = storeOptions;
        _this.lastProgress = {
            totalBytes: 0,
            totalPercent: 0,
        };
        // do not delete filename from original options reference - copy it first
        _this.storeOptions = Object.assign({}, storeOptions);
        var validateRes = (0, schema_1.getValidator)(schema_1.UploadParamsSchema)(options);
        if (validateRes.errors.length) {
            throw new filestack_error_1.FilestackError("Invalid upload params", validateRes.errors, filestack_error_1.FilestackErrorType.VALIDATION);
        }
        var storeValidateRes = (0, schema_1.getValidator)(schema_1.StoreParamsSchema)(storeOptions);
        if (storeValidateRes.errors.length) {
            throw new filestack_error_1.FilestackError("Invalid store upload params", storeValidateRes.errors, filestack_error_1.FilestackErrorType.VALIDATION);
        }
        if (storeOptions.filename) {
            _this.overrideFileName = storeOptions.filename;
            delete _this.storeOptions.filename;
        }
        if (_this.storeOptions.sanitizer) {
            _this.sanitizerOptions = _this.storeOptions.sanitizer;
            delete _this.storeOptions.sanitizer;
        }
        _this.uploader = new s3_1.S3Uploader(_this.storeOptions, options.concurrency);
        _this.uploader.setRetryConfig({
            retry: options.retry || 10,
            onRetry: options.onRetry,
            retryFactor: options.retryFactor || 2,
            retryMaxTime: options.retryMaxTime || 15000,
        });
        _this.uploader.setTimeout(options.timeout || 120000);
        if (options.partSize) {
            _this.uploader.setPartSize(options.partSize);
        }
        if (options.intelligentChunkSize) {
            _this.uploader.setIntelligentChunkSize(options.intelligentChunkSize);
        }
        if (options.disableIntegrityCheck) {
            _this.uploader.setIntegrityCheck(false);
        }
        if (options.intelligent) {
            _this.uploader.setUploadMode(options.intelligent === 'fallback' ? "fallback" /* UploadMode.FALLBACK */ : "intelligent" /* UploadMode.INTELLIGENT */);
        }
        _this.uploader.setUploadTags(options.tags);
        _this.uploader.on('start', function () { return _this.emit('start'); });
        _this.uploader.on('error', function (e) { return _this.emit('error', e); });
        _this.uploader.on('progress', _this.handleProgress.bind(_this));
        return _this;
    }
    /**
     * Set session object to uploader
     *
     * @deprecated
     * @param {Session} session
     * @memberof Upload
     */
    Upload.prototype.setSession = function (session) {
        this.uploader.setApikey(session.apikey);
        if (session.policy && session.signature) {
            this.uploader.setSecurity({
                policy: session.policy,
                signature: session.signature,
            });
        }
        this.uploader.setUrl(session.urls.uploadApiUrl);
    };
    /**
     * Set cancel token to controll upload flow
     *
     * @param {*} token
     * @returns
     * @memberof Upload
     */
    Upload.prototype.setToken = function (token) {
        var _this = this;
        if (!token || token !== Object(token)) {
            throw new Error('Incorrect upload token. Must be instance of object');
        }
        token.pause = function () { return _this.uploader.pause(); };
        token.resume = function () { return _this.uploader.resume(); };
        token.cancel = function () { return _this.uploader.abort(); };
        return token;
    };
    /**
     * Sets security to uploader instance
     *
     * @param {Security} security
     * @memberof Upload
     */
    Upload.prototype.setSecurity = function (security) {
        this.uploader.setSecurity(security);
    };
    /**
     * Set upload tags
     *
     * @param {Tags} tags
     * @memberof Upload
     */
    Upload.prototype.setUploadTags = function (tags) {
        this.uploader.setUploadTags(tags);
    };
    /**
     * Upload single file
     *
     * @param {(InputFile)} file
     * @param {(string)} altText
     * @returns {Promise<any>}
     * @memberof Upload
     */
    Upload.prototype.upload = function (input, altText) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var f, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, file_tools_1.getFile)(input, this.sanitizerOptions)];
                    case 1:
                        f = _a.sent();
                        f.customName = this.overrideFileName;
                        if (altText) {
                            f.alt = altText;
                        }
                        this.uploader.addFile(f);
                        this.startProgressInterval();
                        return [4 /*yield*/, this.uploader.execute()];
                    case 2:
                        res = (_a.sent()).shift();
                        this.stopProgressInterval();
                        this.uploader.removeAllListeners();
                        if (res.status === "Failed" /* FileState.FAILED */) {
                            return [2 /*return*/, Promise.reject(res)];
                        }
                        return [2 /*return*/, Promise.resolve(res)];
                }
            });
        });
    };
    /**
     * Upload multiple files at once
     *
     * @param {(InputFile[])} input
     * @returns {Promise<any>}
     * @memberof Upload
     */
    Upload.prototype.multiupload = function (input) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _i, i, f, res;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = input;
                        _b = [];
                        for (_c in _a)
                            _b.push(_c);
                        _i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _b.length)) return [3 /*break*/, 4];
                        _c = _b[_i];
                        if (!(_c in _a)) return [3 /*break*/, 3];
                        i = _c;
                        /* istanbul ignore next */
                        if (!input.hasOwnProperty(i)) {
                            return [3 /*break*/, 3];
                        }
                        return [4 /*yield*/, (0, file_tools_1.getFile)(input[i], this.sanitizerOptions)];
                    case 2:
                        f = _d.sent();
                        f.customName = this.overrideFileName;
                        this.uploader.addFile(f);
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        this.startProgressInterval();
                        return [4 /*yield*/, this.uploader.execute()];
                    case 5:
                        res = _d.sent();
                        this.stopProgressInterval();
                        this.uploader.removeAllListeners();
                        return [2 /*return*/, Promise.resolve(res)];
                }
            });
        });
    };
    /**
     * RUn progress with userdefined interval
     *
     * @private
     * @returns
     * @memberof Upload
     */
    Upload.prototype.startProgressInterval = function () {
        var _this = this;
        if (typeof this.options.onProgress !== 'function') {
            return;
        }
        this.progressIntervalHandler = setInterval(function () {
            _this.options.onProgress(_this.lastProgress);
        }, this.options.progressInterval || DEFAULT_PROGRESS_INTERVAL);
        this.options.onProgress(this.lastProgress);
    };
    /**
     * Stop progress interval after upload
     *
     * @private
     * @memberof Upload
     */
    Upload.prototype.stopProgressInterval = function () {
        clearInterval(this.progressIntervalHandler);
    };
    /**
     * Handle upload interval and normalize values
     *
     * @private
     * @param {ProgressEvent} progress
     * @memberof Upload
     */
    Upload.prototype.handleProgress = function (progress) {
        // get max progress data to avoid progress jumps on any part error
        progress = normalizeProgress(progress, this.lastProgress);
        if (this.lastProgress.files) {
            for (var i in progress.files) {
                if (this.lastProgress.files[i]) {
                    progress.files[i] = normalizeProgress(progress.files[i], this.lastProgress.files[i]);
                }
            }
        }
        this.lastProgress = progress;
    };
    return Upload;
}(eventemitter3_1.EventEmitter));
exports.Upload = Upload;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
